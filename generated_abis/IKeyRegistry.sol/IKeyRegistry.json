{"abi":[{"type":"function","name":"REMOVE_TYPEHASH","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"VERSION","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"add","inputs":[{"name":"fidOwner","type":"address","internalType":"address"},{"name":"keyType","type":"uint32","internalType":"uint32"},{"name":"key","type":"bytes","internalType":"bytes"},{"name":"metadataType","type":"uint8","internalType":"uint8"},{"name":"metadata","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"bulkAddKeysForMigration","inputs":[{"name":"items","type":"tuple[]","internalType":"struct IKeyRegistry.BulkAddData[]","components":[{"name":"fid","type":"uint256","internalType":"uint256"},{"name":"keys","type":"tuple[]","internalType":"struct IKeyRegistry.BulkAddKey[]","components":[{"name":"key","type":"bytes","internalType":"bytes"},{"name":"metadata","type":"bytes","internalType":"bytes"}]}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"bulkResetKeysForMigration","inputs":[{"name":"items","type":"tuple[]","internalType":"struct IKeyRegistry.BulkResetData[]","components":[{"name":"fid","type":"uint256","internalType":"uint256"},{"name":"keys","type":"bytes[]","internalType":"bytes[]"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"freezeKeyGateway","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"gatewayFrozen","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"idRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IdRegistryLike"}],"stateMutability":"view"},{"type":"function","name":"keyAt","inputs":[{"name":"fid","type":"uint256","internalType":"uint256"},{"name":"state","type":"uint8","internalType":"enum IKeyRegistry.KeyState"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"keyDataOf","inputs":[{"name":"fid","type":"uint256","internalType":"uint256"},{"name":"key","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IKeyRegistry.KeyData","components":[{"name":"state","type":"uint8","internalType":"enum IKeyRegistry.KeyState"},{"name":"keyType","type":"uint32","internalType":"uint32"}]}],"stateMutability":"view"},{"type":"function","name":"keyGateway","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"keysOf","inputs":[{"name":"fid","type":"uint256","internalType":"uint256"},{"name":"state","type":"uint8","internalType":"enum IKeyRegistry.KeyState"}],"outputs":[{"name":"","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"view"},{"type":"function","name":"keysOf","inputs":[{"name":"fid","type":"uint256","internalType":"uint256"},{"name":"state","type":"uint8","internalType":"enum IKeyRegistry.KeyState"},{"name":"startIdx","type":"uint256","internalType":"uint256"},{"name":"batchSize","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"page","type":"bytes[]","internalType":"bytes[]"},{"name":"nextIdx","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"maxKeysPerFid","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"remove","inputs":[{"name":"key","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"removeFor","inputs":[{"name":"fidOwner","type":"address","internalType":"address"},{"name":"key","type":"bytes","internalType":"bytes"},{"name":"deadline","type":"uint256","internalType":"uint256"},{"name":"sig","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setIdRegistry","inputs":[{"name":"_idRegistry","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setKeyGateway","inputs":[{"name":"_keyGateway","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMaxKeysPerFid","inputs":[{"name":"_maxKeysPerFid","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setValidator","inputs":[{"name":"keyType","type":"uint32","internalType":"uint32"},{"name":"metadataType","type":"uint8","internalType":"uint8"},{"name":"validator","type":"address","internalType":"contract IMetadataValidator"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"totalKeys","inputs":[{"name":"fid","type":"uint256","internalType":"uint256"},{"name":"state","type":"uint8","internalType":"enum IKeyRegistry.KeyState"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"event","name":"Add","inputs":[{"name":"fid","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"keyType","type":"uint32","indexed":true,"internalType":"uint32"},{"name":"key","type":"bytes","indexed":true,"internalType":"bytes"},{"name":"keyBytes","type":"bytes","indexed":false,"internalType":"bytes"},{"name":"metadataType","type":"uint8","indexed":false,"internalType":"uint8"},{"name":"metadata","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"AdminReset","inputs":[{"name":"fid","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"key","type":"bytes","indexed":true,"internalType":"bytes"},{"name":"keyBytes","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"FreezeKeyGateway","inputs":[{"name":"keyGateway","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Remove","inputs":[{"name":"fid","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"key","type":"bytes","indexed":true,"internalType":"bytes"},{"name":"keyBytes","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"SetIdRegistry","inputs":[{"name":"oldIdRegistry","type":"address","indexed":false,"internalType":"address"},{"name":"newIdRegistry","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SetKeyGateway","inputs":[{"name":"oldKeyGateway","type":"address","indexed":false,"internalType":"address"},{"name":"newKeyGateway","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SetMaxKeysPerFid","inputs":[{"name":"oldMax","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newMax","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"SetValidator","inputs":[{"name":"keyType","type":"uint32","indexed":false,"internalType":"uint32"},{"name":"metadataType","type":"uint8","indexed":false,"internalType":"uint8"},{"name":"oldValidator","type":"address","indexed":false,"internalType":"address"},{"name":"newValidator","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"error","name":"ExceedsMaximum","inputs":[]},{"type":"error","name":"GatewayFrozen","inputs":[]},{"type":"error","name":"InvalidKeyType","inputs":[]},{"type":"error","name":"InvalidMaxKeys","inputs":[]},{"type":"error","name":"InvalidMetadata","inputs":[]},{"type":"error","name":"InvalidMetadataType","inputs":[]},{"type":"error","name":"InvalidState","inputs":[]},{"type":"error","name":"Unauthorized","inputs":[]},{"type":"error","name":"ValidatorNotFound","inputs":[{"name":"keyType","type":"uint32","internalType":"uint32"},{"name":"metadataType","type":"uint8","internalType":"uint8"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"REMOVE_TYPEHASH()":"b5775561","VERSION()":"ffa1ad74","add(address,uint32,bytes,uint8,bytes)":"207e3d69","bulkAddKeysForMigration((uint256,(bytes,bytes)[])[])":"708e9c70","bulkResetKeysForMigration((uint256,bytes[])[])":"46b3f429","freezeKeyGateway()":"47cf8d4d","gatewayFrozen()":"95e7549f","idRegistry()":"0aa13b8c","keyAt(uint256,uint8,uint256)":"0ea9442c","keyDataOf(uint256,bytes)":"ac34cc5a","keyGateway()":"80334737","keysOf(uint256,uint8)":"1f64222f","keysOf(uint256,uint8,uint256,uint256)":"f27995e3","maxKeysPerFid()":"e33acf38","remove(bytes)":"58edef4c","removeFor(address,bytes,uint256,bytes)":"787bd966","setIdRegistry(address)":"81749468","setKeyGateway(address)":"b221dac4","setMaxKeysPerFid(uint256)":"d4c04809","setValidator(uint32,uint8,address)":"368ab610","totalKeys(uint256,uint8)":"6840b75e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GatewayFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKeyType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxKeys\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMetadata\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMetadataType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"keyType\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"metadataType\",\"type\":\"uint8\"}],\"name\":\"ValidatorNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"keyType\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"keyBytes\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"metadataType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"keyBytes\",\"type\":\"bytes\"}],\"name\":\"AdminReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keyGateway\",\"type\":\"address\"}],\"name\":\"FreezeKeyGateway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"keyBytes\",\"type\":\"bytes\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldIdRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIdRegistry\",\"type\":\"address\"}],\"name\":\"SetIdRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldKeyGateway\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeyGateway\",\"type\":\"address\"}],\"name\":\"SetKeyGateway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"SetMaxKeysPerFid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"keyType\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"metadataType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValidator\",\"type\":\"address\"}],\"name\":\"SetValidator\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REMOVE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fidOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"keyType\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"metadataType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct IKeyRegistry.BulkAddKey[]\",\"name\":\"keys\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IKeyRegistry.BulkAddData[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"bulkAddKeysForMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"keys\",\"type\":\"bytes[]\"}],\"internalType\":\"struct IKeyRegistry.BulkResetData[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"bulkResetKeysForMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeKeyGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idRegistry\",\"outputs\":[{\"internalType\":\"contract IdRegistryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"internalType\":\"enum IKeyRegistry.KeyState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"keyAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"keyDataOf\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IKeyRegistry.KeyState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"keyType\",\"type\":\"uint32\"}],\"internalType\":\"struct IKeyRegistry.KeyData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"internalType\":\"enum IKeyRegistry.KeyState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"keysOf\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"internalType\":\"enum IKeyRegistry.KeyState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"keysOf\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"page\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"nextIdx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxKeysPerFid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fidOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"removeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_idRegistry\",\"type\":\"address\"}],\"name\":\"setIdRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyGateway\",\"type\":\"address\"}],\"name\":\"setKeyGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxKeysPerFid\",\"type\":\"uint256\"}],\"name\":\"setMaxKeysPerFid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"keyType\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"metadataType\",\"type\":\"uint8\"},{\"internalType\":\"contract IMetadataValidator\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fid\",\"type\":\"uint256\"},{\"internalType\":\"enum IKeyRegistry.KeyState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"totalKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ExceedsMaximum()\":[{\"details\":\"Revert if adding a key exceeds the maximum number of allowed keys per fid.\"}],\"GatewayFrozen()\":[{\"details\":\"Revert when the gateway dependency is permanently frozen.\"}],\"InvalidKeyType()\":[{\"details\":\"Revert if the admin sets a validator for keyType 0.\"}],\"InvalidMaxKeys()\":[{\"details\":\"Revert if the owner sets maxKeysPerFid equal to or below its current value.\"}],\"InvalidMetadata()\":[{\"details\":\"Revert if metadata validation failed.\"}],\"InvalidMetadataType()\":[{\"details\":\"Revert if the admin sets a validator for metadataType 0.\"}],\"InvalidState()\":[{\"details\":\"Revert if a key violates KeyState transition rules.\"}],\"Unauthorized()\":[{\"details\":\"Revert if the caller does not have the authority to perform the action.\"}],\"ValidatorNotFound(uint32,uint8)\":[{\"details\":\"Revert if a validator has not been registered for this keyType and metadataType.\"}]},\"events\":{\"Add(uint256,uint32,bytes,bytes,uint8,bytes)\":{\"details\":\"Emit an event when an admin or fid adds a new key.      Hubs listen for this, validate that keyBytes is an EdDSA pub key and keyType == 1 and      add keyBytes to its SignerStore. Messages signed by keyBytes with `fid` are now valid      and accepted over gossip, sync and client apis. Hubs assume the invariants:      1. Add(fid, ..., key, keyBytes, ...) cannot emit if there is an earlier emit with         Add(fid, ..., key, keyBytes, ...) and no AdminReset(fid, key, keyBytes) inbetween.      2. Add(fid, ..., key, keyBytes, ...) cannot emit if there is an earlier emit with         Remove(fid, key, keyBytes).      3. For all Add(..., ..., key, keyBytes, ...), key = keccak(keyBytes)\",\"params\":{\"fid\":\"The fid associated with the key.\",\"key\":\"The key being registered. (indexed as hash)\",\"keyBytes\":\"The bytes of the key being registered.\",\"keyType\":\"The type of the key.\",\"metadata\":\"Metadata about the key.\",\"metadataType\":\"The type of the metadata.\"}},\"AdminReset(uint256,bytes,bytes)\":{\"details\":\"Emit an event when an admin resets an added key.      Hubs listen for this, validate that keyType == 1 and that keyBytes exists in its SignerStore.      keyBytes is no longer tracked, messages signed by keyBytes with `fid` are invalid, dropped      immediately and not accepted. Hubs assume the following invariants:      1. AdminReset(fid, key, keyBytes) cannot emit unless the most recent event for the fid         was Add(fid, ..., key, keyBytes, ...).      2. For all AdminReset(..., key, keyBytes), key = keccak(keyBytes).      3. AdminReset() cannot emit after Migrated().\",\"params\":{\"fid\":\"The fid associated with the key.\",\"key\":\"The key being reset. (indexed as hash)\",\"keyBytes\":\"The bytes of the key being registered.\"}},\"FreezeKeyGateway(address)\":{\"details\":\"Emit an event when the contract owner permanently freezes the KeyGateway address.\",\"params\":{\"keyGateway\":\"The permanent KeyGateway address.\"}},\"Remove(uint256,bytes,bytes)\":{\"details\":\"Emit an event when an fid removes an added key.      Hubs listen for this, validate that keyType == 1 and keyBytes exists in its SignerStore.      keyBytes is marked as removed, messages signed by keyBytes with `fid` are invalid,      dropped immediately and no longer accepted. Hubs assume the invariants:      1. Remove(fid, key, keyBytes) cannot emit if there is no earlier emit with         Add(fid, ..., key, keyBytes, ...)      2. Remove(fid, key, keyBytes) cannot emit if there is an earlier emit with         Remove(fid, key, keyBytes)      3. For all Remove(..., key, keyBytes), key = keccak(keyBytes)\",\"params\":{\"fid\":\"The fid associated with the key.\",\"key\":\"The key being registered. (indexed as hash)\",\"keyBytes\":\"The bytes of the key being registered.\"}},\"SetIdRegistry(address,address)\":{\"details\":\"Emit an event when the admin sets a new IdRegistry contract address.\",\"params\":{\"newIdRegistry\":\"The new IdRegistry address.\",\"oldIdRegistry\":\"The previous IdRegistry address.\"}},\"SetKeyGateway(address,address)\":{\"details\":\"Emit an event when the admin sets a new KeyGateway address.\",\"params\":{\"newKeyGateway\":\"The new KeyGateway address.\",\"oldKeyGateway\":\"The previous KeyGateway address.\"}},\"SetMaxKeysPerFid(uint256,uint256)\":{\"details\":\"Emit an event when the admin sets a new maximum keys per fid.\",\"params\":{\"newMax\":\"The new maximum.\",\"oldMax\":\"The previous maximum.\"}},\"SetValidator(uint32,uint8,address,address)\":{\"details\":\"Emit an event when the admin sets a metadata validator contract for a given      keyType and metadataType.\",\"params\":{\"keyType\":\"The numeric keyType associated with this validator.\",\"metadataType\":\"The metadataType associated with this validator.\",\"newValidator\":\"The new validator contract address.\",\"oldValidator\":\"The previous validator contract address.\"}}},\"kind\":\"dev\",\"methods\":{\"add(address,uint32,bytes,uint8,bytes)\":{\"params\":{\"key\":\"Bytes of the key to add.\",\"keyType\":\"The key's numeric keyType.\",\"metadata\":\"Metadata about the key, which is not stored and only emitted in an event.\",\"metadataType\":\"Metadata type ID.\"}},\"bulkAddKeysForMigration((uint256,(bytes,bytes)[])[])\":{\"params\":{\"items\":\"An array of BulkAddData structs including fid and array of BulkAddKey structs.\"}},\"bulkResetKeysForMigration((uint256,bytes[])[])\":{\"params\":{\"items\":\"A list of BulkResetData structs including an fid and array of keys.\"}},\"keyAt(uint256,uint8,uint256)\":{\"params\":{\"fid\":\"the fid associated with the key.\",\"index\":\"index of the key in the fid's key set. Must be a value              less than totalKeys(fid). Note that because keys are              stored in an underlying enumerable set, the ordering of              keys is not guaranteed to be stable.\"},\"returns\":{\"_0\":\"bytes Bytes of the key.\"}},\"keyDataOf(uint256,bytes)\":{\"params\":{\"fid\":\"The fid associated with the key.\",\"key\":\"Bytes of the key.\"},\"returns\":{\"_0\":\"KeyData struct that contains the state and keyType.\"}},\"keysOf(uint256,uint8)\":{\"details\":\"WARNING: This function will copy the entire key set to memory,         which can be quite expensive. This is intended to be called         offchain with eth_call, not onchain.\",\"params\":{\"fid\":\"the fid associated with the keys.\"},\"returns\":{\"_0\":\"bytes[] Array of all keys.\"}},\"keysOf(uint256,uint8,uint256,uint256)\":{\"params\":{\"batchSize\":\"Number of items to return.\",\"fid\":\"The fid associated with the keys.\",\"startIdx\":\"Start index of lookup.\"},\"returns\":{\"nextIdx\":\"Next index in the set of all keys.\",\"page\":\"   Array of keys.\"}},\"remove(bytes)\":{\"params\":{\"key\":\"Bytes of the key to remove.\"}},\"removeFor(address,bytes,uint256,bytes)\":{\"params\":{\"deadline\":\"Deadline after which the signature expires.\",\"fidOwner\":\"The fid owner address.\",\"key\":\"Bytes of the key to remove.\",\"sig\":\"EIP-712 Remove signature generated by fid owner.\"}},\"setIdRegistry(address)\":{\"params\":{\"_idRegistry\":\"The new IdRegistry address.\"}},\"setKeyGateway(address)\":{\"params\":{\"_keyGateway\":\"The new KeyGateway address.\"}},\"setMaxKeysPerFid(uint256)\":{\"params\":{\"_maxKeysPerFid\":\"The new max keys per fid.\"}},\"setValidator(uint32,uint8,address)\":{\"params\":{\"keyType\":\"The numeric key type ID associated with this validator.\",\"metadataType\":\"The numeric metadata type ID associated with this validator.\",\"validator\":\"Contract implementing IMetadataValidator.\"}},\"totalKeys(uint256,uint8)\":{\"params\":{\"fid\":\"the fid associated with the keys.\"},\"returns\":{\"_0\":\"uint256 total number of active keys associated with the fid.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"REMOVE_TYPEHASH()\":{\"notice\":\"EIP-712 typehash for Remove signatures.\"},\"VERSION()\":{\"notice\":\"Contract version specified in the Farcaster protocol version scheme.\"},\"add(address,uint32,bytes,uint8,bytes)\":{\"notice\":\"Add a key associated with fidOwner's fid, setting the key state to ADDED.         Can only be called by the keyGateway address.\"},\"bulkAddKeysForMigration((uint256,(bytes,bytes)[])[])\":{\"notice\":\"Add multiple keys as part of the initial migration. Only callable by the contract owner.\"},\"bulkResetKeysForMigration((uint256,bytes[])[])\":{\"notice\":\"Reset multiple keys as part of the initial migration. Only callable by the contract owner.         Reset is not the same as removal: this function sets the key state back to NULL,         rather than REMOVED. This allows the owner to correct any errors in the initial migration until         the grace period expires.\"},\"freezeKeyGateway()\":{\"notice\":\"Permanently freeze the KeyGateway address. Only callable by owner.\"},\"gatewayFrozen()\":{\"notice\":\"Whether the KeyGateway address is permanently frozen.\"},\"idRegistry()\":{\"notice\":\"The IdRegistry contract.\"},\"keyAt(uint256,uint8,uint256)\":{\"notice\":\"Return key at the given index in the fid's key set. Can be         called to enumerate all active keys for a given fid.\"},\"keyDataOf(uint256,bytes)\":{\"notice\":\"Retrieve state and type data for a given key.\"},\"keyGateway()\":{\"notice\":\"The KeyGateway address.\"},\"keysOf(uint256,uint8)\":{\"notice\":\"Return an array of all active keys for a given fid.\"},\"keysOf(uint256,uint8,uint256,uint256)\":{\"notice\":\"Return an array of all active keys for a given fid,         paged by index and batch size.\"},\"maxKeysPerFid()\":{\"notice\":\"Maximum number of keys per fid.\"},\"remove(bytes)\":{\"notice\":\"Remove a key associated with the caller's fid, setting the key state to REMOVED.         The key must be in the ADDED state.\"},\"removeFor(address,bytes,uint256,bytes)\":{\"notice\":\"Remove a key on behalf of another fid owner, setting the key state to REMOVED.         caller must supply a valid EIP-712 Remove signature from the fid owner.\"},\"setIdRegistry(address)\":{\"notice\":\"Set the IdRegistry contract address. Only callable by owner.\"},\"setKeyGateway(address)\":{\"notice\":\"Set the KeyGateway address allowed to add keys. Only callable by owner.\"},\"setMaxKeysPerFid(uint256)\":{\"notice\":\"Set the maximum number of keys allowed per fid. Only callable by owner.\"},\"setValidator(uint32,uint8,address)\":{\"notice\":\"Set a metadata validator contract for the given keyType and metadataType. Only callable by owner.\"},\"totalKeys(uint256,uint8)\":{\"notice\":\"Return number of active keys for a given fid.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IKeyRegistry.sol\":\"IKeyRegistry\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":chainlink/=lib/chainlink-brownie-contracts/contracts/src/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-latest/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-latest/=lib/openzeppelin-latest/\",\":openzeppelin/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/\"]},\"sources\":{\"src/interfaces/IKeyRegistry.sol\":{\"keccak256\":\"0xefe14b68f2ab29f538f959b31554725eb07878e275449cfe4decdf38ccf33e72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3471ab00a8bd3d913f5799bb771ed07ebccc8355a04127cfe5c82f046b2c42d7\",\"dweb:/ipfs/QmQxj7BiKdS54XTRe6gsPSLnFpaZNvpEr1SWpfKqfzk6uf\"]},\"src/interfaces/IMetadataValidator.sol\":{\"keccak256\":\"0x27018deec7c3f5be1e7f357ce749fe4c3d52cf76ad4cbe2f7b54c648fe785d80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://653d22e3904bc66aa692d88d8739179b674d914612cc980598e31e5538f5390a\",\"dweb:/ipfs/QmY2vWDWrKmm6AVCGnkV3pDfNfuqKzEwuLJYAN4xdfeKzX\"]},\"src/interfaces/IdRegistryLike.sol\":{\"keccak256\":\"0xe06fbf0c31bfd4136c28355a3cd663a0fe06b9843966ca3f71a13b8fc946300f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d74a03f3a6c1e8f3ad2ac10910d9809cc287e5ae856af01b9e9afa3a8b290786\",\"dweb:/ipfs/QmNeAp9sP6sWQGyhP6itEeQTo8xHtvzEn1Ks7LjnJXAuAJ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.29+commit.ab55807c"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ExceedsMaximum"},{"inputs":[],"type":"error","name":"GatewayFrozen"},{"inputs":[],"type":"error","name":"InvalidKeyType"},{"inputs":[],"type":"error","name":"InvalidMaxKeys"},{"inputs":[],"type":"error","name":"InvalidMetadata"},{"inputs":[],"type":"error","name":"InvalidMetadataType"},{"inputs":[],"type":"error","name":"InvalidState"},{"inputs":[],"type":"error","name":"Unauthorized"},{"inputs":[{"internalType":"uint32","name":"keyType","type":"uint32"},{"internalType":"uint8","name":"metadataType","type":"uint8"}],"type":"error","name":"ValidatorNotFound"},{"inputs":[{"internalType":"uint256","name":"fid","type":"uint256","indexed":true},{"internalType":"uint32","name":"keyType","type":"uint32","indexed":true},{"internalType":"bytes","name":"key","type":"bytes","indexed":true},{"internalType":"bytes","name":"keyBytes","type":"bytes","indexed":false},{"internalType":"uint8","name":"metadataType","type":"uint8","indexed":false},{"internalType":"bytes","name":"metadata","type":"bytes","indexed":false}],"type":"event","name":"Add","anonymous":false},{"inputs":[{"internalType":"uint256","name":"fid","type":"uint256","indexed":true},{"internalType":"bytes","name":"key","type":"bytes","indexed":true},{"internalType":"bytes","name":"keyBytes","type":"bytes","indexed":false}],"type":"event","name":"AdminReset","anonymous":false},{"inputs":[{"internalType":"address","name":"keyGateway","type":"address","indexed":false}],"type":"event","name":"FreezeKeyGateway","anonymous":false},{"inputs":[{"internalType":"uint256","name":"fid","type":"uint256","indexed":true},{"internalType":"bytes","name":"key","type":"bytes","indexed":true},{"internalType":"bytes","name":"keyBytes","type":"bytes","indexed":false}],"type":"event","name":"Remove","anonymous":false},{"inputs":[{"internalType":"address","name":"oldIdRegistry","type":"address","indexed":false},{"internalType":"address","name":"newIdRegistry","type":"address","indexed":false}],"type":"event","name":"SetIdRegistry","anonymous":false},{"inputs":[{"internalType":"address","name":"oldKeyGateway","type":"address","indexed":false},{"internalType":"address","name":"newKeyGateway","type":"address","indexed":false}],"type":"event","name":"SetKeyGateway","anonymous":false},{"inputs":[{"internalType":"uint256","name":"oldMax","type":"uint256","indexed":false},{"internalType":"uint256","name":"newMax","type":"uint256","indexed":false}],"type":"event","name":"SetMaxKeysPerFid","anonymous":false},{"inputs":[{"internalType":"uint32","name":"keyType","type":"uint32","indexed":false},{"internalType":"uint8","name":"metadataType","type":"uint8","indexed":false},{"internalType":"address","name":"oldValidator","type":"address","indexed":false},{"internalType":"address","name":"newValidator","type":"address","indexed":false}],"type":"event","name":"SetValidator","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"REMOVE_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"VERSION","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"fidOwner","type":"address"},{"internalType":"uint32","name":"keyType","type":"uint32"},{"internalType":"bytes","name":"key","type":"bytes"},{"internalType":"uint8","name":"metadataType","type":"uint8"},{"internalType":"bytes","name":"metadata","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"add"},{"inputs":[{"internalType":"struct IKeyRegistry.BulkAddData[]","name":"items","type":"tuple[]","components":[{"internalType":"uint256","name":"fid","type":"uint256"},{"internalType":"struct IKeyRegistry.BulkAddKey[]","name":"keys","type":"tuple[]","components":[{"internalType":"bytes","name":"key","type":"bytes"},{"internalType":"bytes","name":"metadata","type":"bytes"}]}]}],"stateMutability":"nonpayable","type":"function","name":"bulkAddKeysForMigration"},{"inputs":[{"internalType":"struct IKeyRegistry.BulkResetData[]","name":"items","type":"tuple[]","components":[{"internalType":"uint256","name":"fid","type":"uint256"},{"internalType":"bytes[]","name":"keys","type":"bytes[]"}]}],"stateMutability":"nonpayable","type":"function","name":"bulkResetKeysForMigration"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"freezeKeyGateway"},{"inputs":[],"stateMutability":"view","type":"function","name":"gatewayFrozen","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"idRegistry","outputs":[{"internalType":"contract IdRegistryLike","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"fid","type":"uint256"},{"internalType":"enum IKeyRegistry.KeyState","name":"state","type":"uint8"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function","name":"keyAt","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"uint256","name":"fid","type":"uint256"},{"internalType":"bytes","name":"key","type":"bytes"}],"stateMutability":"view","type":"function","name":"keyDataOf","outputs":[{"internalType":"struct IKeyRegistry.KeyData","name":"","type":"tuple","components":[{"internalType":"enum IKeyRegistry.KeyState","name":"state","type":"uint8"},{"internalType":"uint32","name":"keyType","type":"uint32"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"keyGateway","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"fid","type":"uint256"},{"internalType":"enum IKeyRegistry.KeyState","name":"state","type":"uint8"}],"stateMutability":"view","type":"function","name":"keysOf","outputs":[{"internalType":"bytes[]","name":"","type":"bytes[]"}]},{"inputs":[{"internalType":"uint256","name":"fid","type":"uint256"},{"internalType":"enum IKeyRegistry.KeyState","name":"state","type":"uint8"},{"internalType":"uint256","name":"startIdx","type":"uint256"},{"internalType":"uint256","name":"batchSize","type":"uint256"}],"stateMutability":"view","type":"function","name":"keysOf","outputs":[{"internalType":"bytes[]","name":"page","type":"bytes[]"},{"internalType":"uint256","name":"nextIdx","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"maxKeysPerFid","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"key","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"remove"},{"inputs":[{"internalType":"address","name":"fidOwner","type":"address"},{"internalType":"bytes","name":"key","type":"bytes"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bytes","name":"sig","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"removeFor"},{"inputs":[{"internalType":"address","name":"_idRegistry","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setIdRegistry"},{"inputs":[{"internalType":"address","name":"_keyGateway","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setKeyGateway"},{"inputs":[{"internalType":"uint256","name":"_maxKeysPerFid","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setMaxKeysPerFid"},{"inputs":[{"internalType":"uint32","name":"keyType","type":"uint32"},{"internalType":"uint8","name":"metadataType","type":"uint8"},{"internalType":"contract IMetadataValidator","name":"validator","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setValidator"},{"inputs":[{"internalType":"uint256","name":"fid","type":"uint256"},{"internalType":"enum IKeyRegistry.KeyState","name":"state","type":"uint8"}],"stateMutability":"view","type":"function","name":"totalKeys","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"add(address,uint32,bytes,uint8,bytes)":{"params":{"key":"Bytes of the key to add.","keyType":"The key's numeric keyType.","metadata":"Metadata about the key, which is not stored and only emitted in an event.","metadataType":"Metadata type ID."}},"bulkAddKeysForMigration((uint256,(bytes,bytes)[])[])":{"params":{"items":"An array of BulkAddData structs including fid and array of BulkAddKey structs."}},"bulkResetKeysForMigration((uint256,bytes[])[])":{"params":{"items":"A list of BulkResetData structs including an fid and array of keys."}},"keyAt(uint256,uint8,uint256)":{"params":{"fid":"the fid associated with the key.","index":"index of the key in the fid's key set. Must be a value              less than totalKeys(fid). Note that because keys are              stored in an underlying enumerable set, the ordering of              keys is not guaranteed to be stable."},"returns":{"_0":"bytes Bytes of the key."}},"keyDataOf(uint256,bytes)":{"params":{"fid":"The fid associated with the key.","key":"Bytes of the key."},"returns":{"_0":"KeyData struct that contains the state and keyType."}},"keysOf(uint256,uint8)":{"details":"WARNING: This function will copy the entire key set to memory,         which can be quite expensive. This is intended to be called         offchain with eth_call, not onchain.","params":{"fid":"the fid associated with the keys."},"returns":{"_0":"bytes[] Array of all keys."}},"keysOf(uint256,uint8,uint256,uint256)":{"params":{"batchSize":"Number of items to return.","fid":"The fid associated with the keys.","startIdx":"Start index of lookup."},"returns":{"nextIdx":"Next index in the set of all keys.","page":"   Array of keys."}},"remove(bytes)":{"params":{"key":"Bytes of the key to remove."}},"removeFor(address,bytes,uint256,bytes)":{"params":{"deadline":"Deadline after which the signature expires.","fidOwner":"The fid owner address.","key":"Bytes of the key to remove.","sig":"EIP-712 Remove signature generated by fid owner."}},"setIdRegistry(address)":{"params":{"_idRegistry":"The new IdRegistry address."}},"setKeyGateway(address)":{"params":{"_keyGateway":"The new KeyGateway address."}},"setMaxKeysPerFid(uint256)":{"params":{"_maxKeysPerFid":"The new max keys per fid."}},"setValidator(uint32,uint8,address)":{"params":{"keyType":"The numeric key type ID associated with this validator.","metadataType":"The numeric metadata type ID associated with this validator.","validator":"Contract implementing IMetadataValidator."}},"totalKeys(uint256,uint8)":{"params":{"fid":"the fid associated with the keys."},"returns":{"_0":"uint256 total number of active keys associated with the fid."}}},"version":1},"userdoc":{"kind":"user","methods":{"REMOVE_TYPEHASH()":{"notice":"EIP-712 typehash for Remove signatures."},"VERSION()":{"notice":"Contract version specified in the Farcaster protocol version scheme."},"add(address,uint32,bytes,uint8,bytes)":{"notice":"Add a key associated with fidOwner's fid, setting the key state to ADDED.         Can only be called by the keyGateway address."},"bulkAddKeysForMigration((uint256,(bytes,bytes)[])[])":{"notice":"Add multiple keys as part of the initial migration. Only callable by the contract owner."},"bulkResetKeysForMigration((uint256,bytes[])[])":{"notice":"Reset multiple keys as part of the initial migration. Only callable by the contract owner.         Reset is not the same as removal: this function sets the key state back to NULL,         rather than REMOVED. This allows the owner to correct any errors in the initial migration until         the grace period expires."},"freezeKeyGateway()":{"notice":"Permanently freeze the KeyGateway address. Only callable by owner."},"gatewayFrozen()":{"notice":"Whether the KeyGateway address is permanently frozen."},"idRegistry()":{"notice":"The IdRegistry contract."},"keyAt(uint256,uint8,uint256)":{"notice":"Return key at the given index in the fid's key set. Can be         called to enumerate all active keys for a given fid."},"keyDataOf(uint256,bytes)":{"notice":"Retrieve state and type data for a given key."},"keyGateway()":{"notice":"The KeyGateway address."},"keysOf(uint256,uint8)":{"notice":"Return an array of all active keys for a given fid."},"keysOf(uint256,uint8,uint256,uint256)":{"notice":"Return an array of all active keys for a given fid,         paged by index and batch size."},"maxKeysPerFid()":{"notice":"Maximum number of keys per fid."},"remove(bytes)":{"notice":"Remove a key associated with the caller's fid, setting the key state to REMOVED.         The key must be in the ADDED state."},"removeFor(address,bytes,uint256,bytes)":{"notice":"Remove a key on behalf of another fid owner, setting the key state to REMOVED.         caller must supply a valid EIP-712 Remove signature from the fid owner."},"setIdRegistry(address)":{"notice":"Set the IdRegistry contract address. Only callable by owner."},"setKeyGateway(address)":{"notice":"Set the KeyGateway address allowed to add keys. Only callable by owner."},"setMaxKeysPerFid(uint256)":{"notice":"Set the maximum number of keys allowed per fid. Only callable by owner."},"setValidator(uint32,uint8,address)":{"notice":"Set a metadata validator contract for the given keyType and metadataType. Only callable by owner."},"totalKeys(uint256,uint8)":{"notice":"Return number of active keys for a given fid."}},"version":1}},"settings":{"remappings":["chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/","chainlink/=lib/chainlink-brownie-contracts/contracts/src/","ds-test/=lib/solmate/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-latest/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-latest/=lib/openzeppelin-latest/","openzeppelin/=lib/openzeppelin-contracts/","solmate/=lib/solmate/"],"optimizer":{"enabled":true,"runs":100000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/interfaces/IKeyRegistry.sol":"IKeyRegistry"},"evmVersion":"cancun","libraries":{}},"sources":{"src/interfaces/IKeyRegistry.sol":{"keccak256":"0xefe14b68f2ab29f538f959b31554725eb07878e275449cfe4decdf38ccf33e72","urls":["bzz-raw://3471ab00a8bd3d913f5799bb771ed07ebccc8355a04127cfe5c82f046b2c42d7","dweb:/ipfs/QmQxj7BiKdS54XTRe6gsPSLnFpaZNvpEr1SWpfKqfzk6uf"],"license":"MIT"},"src/interfaces/IMetadataValidator.sol":{"keccak256":"0x27018deec7c3f5be1e7f357ce749fe4c3d52cf76ad4cbe2f7b54c648fe785d80","urls":["bzz-raw://653d22e3904bc66aa692d88d8739179b674d914612cc980598e31e5538f5390a","dweb:/ipfs/QmY2vWDWrKmm6AVCGnkV3pDfNfuqKzEwuLJYAN4xdfeKzX"],"license":"MIT"},"src/interfaces/IdRegistryLike.sol":{"keccak256":"0xe06fbf0c31bfd4136c28355a3cd663a0fe06b9843966ca3f71a13b8fc946300f","urls":["bzz-raw://d74a03f3a6c1e8f3ad2ac10910d9809cc287e5ae856af01b9e9afa3a8b290786","dweb:/ipfs/QmNeAp9sP6sWQGyhP6itEeQTo8xHtvzEn1Ks7LjnJXAuAJ"],"license":"MIT"}},"version":1},"id":83}